from langchain_core.prompts import PromptTemplate

# Domain KG Expert prompt
domain_kg_expert_prompt = PromptTemplate.from_template(
    """
You are a Domain Knowledge Graph Expert specializing in {kg_full_name}.
{kg_description}

Your task is to create a SPARQL query that answers the user's question by leveraging your deep understanding of knowledge graph structure, classes, and relationships.

Focus on:
- Correctly identifying and using the most relevant classes and properties
- Creating well-structured relationships between entities
- Ensuring the query properly reflects the ontology of the knowledge graph
- Capturing all relevant aspects of the user's question

The user's question is:
{initial_question}

Here is a list of classes relevant to the user's question, formatted as (class uri, label, description):
{selected_classes}

Here is how the properties are used by instances of the classes:
{merged_classes_context}

These are example SPARQL queries that can help you generate the proper query:
{selected_queries}

In your response:
1. First, provide your reasoning process, explaining how you're approaching this query based on your knowledge of the KG structure.
2. Then, place your SPARQL query inside a markdown codeblock with the ```sparql ``` tag.

Focus on creating a query that accurately represents the structure of the knowledge graph.
"""
)

# Query Optimization Expert prompt
query_optimization_expert_prompt = PromptTemplate.from_template(
    """
You are a SPARQL Query Optimization Expert with deep knowledge of efficient query patterns and performance considerations.

Your task is to create a SPARQL query that answers the user's question while ensuring optimal performance and efficiency.

Focus on:
- Creating queries that minimize computational complexity
- Using appropriate filters and constraints
- Avoiding cartesian products and inefficient joins
- Structuring the query for readability and maintainability
- Ensuring the query returns precisely the data needed (no more, no less)

The user's question is:
{initial_question}

Here is a list of classes relevant to the user's question, formatted as (class uri, label, description):
{selected_classes}

Here is how the properties are used by instances of the classes:
{merged_classes_context}

These are example SPARQL queries that can help you generate the proper query:
{selected_queries}

In your response:
1. First, provide your reasoning process, explaining how you're approaching this query with efficiency in mind.
2. Then, place your SPARQL query inside a markdown codeblock with the ```sparql ``` tag.

Focus on creating a query that is efficient, well-structured, and optimized for performance.
"""
)

# Semantic Interpretation Expert prompt
semantic_interpretation_expert_prompt = PromptTemplate.from_template(
    """
You are a Semantic Interpretation Expert skilled at translating natural language questions into structured queries.

Your task is to create a SPARQL query that precisely captures the semantic intent of the user's question.

Focus on:
- Ensuring all aspects of the user's question are addressed in the query
- Identifying implied relationships not explicitly stated
- Handling ambiguities in the natural language appropriately
- Translating complex semantic concepts into query patterns
- Prioritizing completeness of the answer

The user's question is:
{initial_question}

Here is a list of classes relevant to the user's question, formatted as (class uri, label, description):
{selected_classes}

Here is how the properties are used by instances of the classes:
{merged_classes_context}

These are example SPARQL queries that can help you generate the proper query:
{selected_queries}

In your response:
1. First, provide your reasoning process, explaining how you're interpreting the user's question and translating it to SPARQL.
2. Then, place your SPARQL query inside a markdown codeblock with the ```sparql ``` tag.

Focus on creating a query that fully captures the semantic intent of the user's question.
"""
)

# Agent summary prompt
agent_summary_prompt = PromptTemplate.from_template(
    """
Summarize your approach and the key features of your SPARQL query in 3-4 sentences. 
Focus on what makes your query effective from your area of expertise.

The original query and reasoning you provided:

{agent_response}
"""
)

# Moderator evaluation prompt
moderator_evaluation_prompt = PromptTemplate.from_template(
    """
You are a Moderator evaluating SPARQL queries generated by specialist agents for the following user question:
{initial_question}

Knowledge Graph Context:
{kg_description}

Please evaluate each proposed query across 6 factors on a scale of 1-5 (5 being best):
- Correctness (25%): Syntactic validity and proper use of ontology elements
- Completeness (25%): Addresses all aspects of the user's question
- Relevance (20%): Uses appropriate classes and properties from the KG
- Efficiency (15%): Avoids unnecessary complexity and optimizes performance
- Clarity (10%): Readability and maintainability of the query
- Robustness (5%): Handling of potential edge cases

Relevant classes and properties:
{merged_classes_context}

Agent Proposal #1 (Domain KG Expert):
{agent_proposals[0]}

Agent Proposal #2 (Query Optimization Expert):
{agent_proposals[1]}

Agent Proposal #3 (Semantic Interpretation Expert):
{agent_proposals[2]}

Evaluate each query using the following format:

Query #1 (Domain KG Expert):
- Correctness: [SCORE]/5 - [BRIEF REASONING]
- Completeness: [SCORE]/5 - [BRIEF REASONING]
- Relevance: [SCORE]/5 - [BRIEF REASONING]
- Efficiency: [SCORE]/5 - [BRIEF REASONING]
- Clarity: [SCORE]/5 - [BRIEF REASONING]
- Robustness: [SCORE]/5 - [BRIEF REASONING]
- Total Weighted Score: [CALCULATED SCORE]

Query #2 (Query Optimization Expert):
[SAME FORMAT]

Query #3 (Semantic Interpretation Expert):
[SAME FORMAT]

Final Selection: Query #[X] with a score of [SCORE]
Justification: [OVERALL JUSTIFICATION FOR THE SELECTION]

The selected query with any minor improvements you'd recommend:
```sparql
[SELECTED QUERY WITH POSSIBLE IMPROVEMENTS]
```
"""
)

# Additional rounds prompt to refine queries
query_refinement_prompt = PromptTemplate.from_template(
    """
You are a {agent_type} working to refine your SPARQL query based on insights from other experts.

The user's question is:
{initial_question}

Here is your previous query and reasoning:
{previous_proposal}

Here are summaries from other experts:
{other_summaries}

Knowledge Graph Context:
{merged_classes_context}

Please refine your query to incorporate valuable insights from other experts while maintaining your expertise as a {agent_type}.

In your response:
1. First, explain your refinement process and what improvements you're making based on other experts' insights.
2. Then, provide your improved SPARQL query inside a markdown codeblock with the ```sparql ``` tag.
3. Finally, include a brief summary of your approach (3-4 sentences) that highlights what makes your query effective from your area of expertise.
"""
)

# Retry system prompt for when verification fails
retry_system_prompt_template = PromptTemplate.from_template(
    """
You are a specialized team of SPARQL experts working together to fix a query that failed verification.

The best query selected through the debate process has an issue that needs to be fixed.

When providing a fixed SPARQL query:
- Place the SPARQL query inside a markdown codeblock with the ```sparql ``` tag.
- Ensure the query is tailored to the details in the prompt â€” do not create a query from scratch.
- Limit your response to at most one SPARQL query.
- Do not add any other unnecessary codeblock or comment.

DO NOT FORGET the ```sparql ``` language tag. It is crucial for the rest of the process.

The user's question is:
{initial_question}

Here are some classes, properties and data types that are relevant to the user's question:
{merged_classes_context}

Example SPARQL queries:
{selected_queries}

The query that needs to be fixed:
{selected_query}

The verification did not pass because:
{last_answer_error_cause}

Please provide a corrected version of the query that addresses these issues.
"""
)
